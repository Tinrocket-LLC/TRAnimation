<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2023r2" FormatVersion="2" MinIDEVersion="20210300">
<block type="Module" ID="1656168447">
 <ObjName>DemoSolarSystemSprite</ObjName>
 <ObjContainerID>1725169663</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>TRAnimationGroupSprite</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility>(TargetConsole and (Target32Bit or Target64Bit)) or  (TargetWeb and (Target32Bit or Target64Bit)) or  (TargetDesktop and (Target32Bit or Target64Bit)) or  (TargetIOS and (Target64Bit)) or  (TargetAndroid and (Target64Bit))</Compatibility>
 <Method>
  <ItemName>NextFrameOverride</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1181016063</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub NextFrameOverride(g as Graphics, core as TRAnimationCanvasCore, worldTransform as TRAffineTransform, elapsedTime as Double)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.SolveGravity(elapsedTime)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>g as Graphics, core as TRAnimationCanvasCore, worldTransform as TRAffineTransform, elapsedTime as Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsAnimating</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1251880959</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsAnimating() As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>AddChild</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1929717759</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddChild(child as TRAnimationSprite, index as Integer = -1)</SourceLine>
   <SourceLine>// Calling the overridden superclass method.</SourceLine>
   <SourceLine>Super.AddChild(child, index)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If child IsA DemoPlanetSprite Then</SourceLine>
   <SourceLine>Me.Planets.Add(DemoPlanetSprite(child))</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>child as TRAnimationSprite, index as Integer = -1</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SolveGravity</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1539041279</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SolveGravity(elapsedTime as Double)</SourceLine>
   <SourceLine>Const kGravity = 10000.0</SourceLine>
   <SourceLine>Const kEpsilon = 0.00001</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim planet As DemoPlanetSprite</SourceLine>
   <SourceLine>Dim d As New TRVector2D</SourceLine>
   <SourceLine>Dim v As New TRVector2D</SourceLine>
   <SourceLine>Dim a As New TRVector2D</SourceLine>
   <SourceLine>Dim i, j, u As Integer</SourceLine>
   <SourceLine>Dim scaledGravity As Double = kGravity</SourceLine>
   <SourceLine>Dim distance, d2, force As Double</SourceLine>
   <SourceLine>Dim activePlanets(-1) As DemoPlanetSprite = Me.Planets</SourceLine>
   <SourceLine>Dim nextPlanets(-1) As DemoPlanetSprite</SourceLine>
   <SourceLine>Dim planetA, planetB As DemoPlanetSprite</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>u = activePlanets.LastIndex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For i = 0 To u</SourceLine>
   <SourceLine>For j = i + 1 To u</SourceLine>
   <SourceLine>// Calculate the distance between the two planets</SourceLine>
   <SourceLine>d.Subtract(activePlanets(j).Position, activePlanets(i).Position)</SourceLine>
   <SourceLine>distance = Max(d.Length, kEpsilon)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If distance &lt; Max(activePlanets(i).Radius, activePlanets(j).Radius) Then</SourceLine>
   <SourceLine>If activePlanets(i) = Me.Sun Then</SourceLine>
   <SourceLine>planetA = activePlanets(i)</SourceLine>
   <SourceLine>planetB = activePlanets(j)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>planetB = activePlanets(i)</SourceLine>
   <SourceLine>planetA = activePlanets(j)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Merge within the double loop. We don't have to be accurate; it's a demo</SourceLine>
   <SourceLine>Dim newMass As Double = planetA.Mass + planetB.Mass</SourceLine>
   <SourceLine>Dim newVelocity As New TRVector2D</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>planetA.Velocity.Set( _</SourceLine>
   <SourceLine>(planetA.Velocity.X * planetA.Mass + planetB.Velocity.X * planetB.Mass) / newMass, _</SourceLine>
   <SourceLine>(planetA.Velocity.Y * planetA.Mass + planetB.Velocity.Y * planetB.Mass) / newMass)</SourceLine>
   <SourceLine>planetA.Mass = newMass</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Kill the 2nd planet</SourceLine>
   <SourceLine>planetB.Inactive = True</SourceLine>
   <SourceLine>planetB.Radius = 0</SourceLine>
   <SourceLine>planetB.Mass = 0</SourceLine>
   <SourceLine>planetB.Velocity.Set(0)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>// Calculate the gravitational force</SourceLine>
   <SourceLine>force = kGravity * activePlanets(i).mass * activePlanets(j).mass / (distance * distance)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Calculate the acceleration for each planet</SourceLine>
   <SourceLine>d2 = 1.0 / Max(distance * activePlanets(i).mass, kEpsilon)</SourceLine>
   <SourceLine>a.Set(force * d.X * d2, force * d.Y * d2)</SourceLine>
   <SourceLine>a.Multiply(elapsedTime)</SourceLine>
   <SourceLine>activePlanets(i).Velocity.Add(a)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Calculate the acceleration for the second planet (opposite direction)</SourceLine>
   <SourceLine>d2 = 1.0 / Max(distance * activePlanets(j).mass, kEpsilon)</SourceLine>
   <SourceLine>a.Set(-force * d.X * d2, -force * d.Y * d2)</SourceLine>
   <SourceLine>a.Multiply(elapsedTime)</SourceLine>
   <SourceLine>activePlanets(j).Velocity.Add(a)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//* Update the positions based on the new velocities and elapsed time *//</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Const kMaxDistance = 5000.0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim scaledVelocity As New TRVector2D</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim p0 As TRVector2D = Me.Sun.Position</SourceLine>
   <SourceLine>For i = 0 To u</SourceLine>
   <SourceLine>scaledVelocity.Set(activePlanets(i).Velocity.X * elapsedTime, activePlanets(i).Velocity.Y * elapsedTime)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>activePlanets(i).Position.Add(scaledVelocity)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If TRVector2D.Distance(p0, activePlanets(i).Position) &gt; kMaxDistance Then</SourceLine>
   <SourceLine>activePlanets(i).Inactive = True</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//* Clean up *//</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For i = 0 To u</SourceLine>
   <SourceLine>If activePlanets(i).Inactive Then</SourceLine>
   <SourceLine>Me.RemoveChild(activePlanets(i))</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>nextPlanets.Add(activePlanets(i))</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Swap buffers</SourceLine>
   <SourceLine>Me.Planets = Me.PlanetsNextBuffer</SourceLine>
   <SourceLine>Me.PlanetsNextBuffer = nextPlanets</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>elapsedTime as Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ActivePlanets</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1431285759</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ActivePlanets() As DemoPlanetSprite()</SourceLine>
   <SourceLine>Dim results(-1) As DemoPlanetSprite</SourceLine>
   <SourceLine>Dim i, u As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>u = Me.Planets.LastIndex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For i = 0 To u</SourceLine>
   <SourceLine>'If Not Me.Planets(i).Inactive Then</SourceLine>
   <SourceLine>results.Add(Me.Planets(i))</SourceLine>
   <SourceLine>'Me.Planets.RemoveAt(i)</SourceLine>
   <SourceLine>'End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return results</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>DemoPlanetSprite()</ItemResult>
 </Method>
 <Property>
  <ItemName>Planets(-1)</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>409419775</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Planets(-1) As DemoPlanetSprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Planets(-1) As DemoPlanetSprite</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Sun</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1623298047</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sun As DemoPlanetSprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Sun As DemoPlanetSprite</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>PlanetsNextBuffer(-1)</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>450273279</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>PlanetsNextBuffer(-1) As DemoPlanetSprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>PlanetsNextBuffer(-1) As DemoPlanetSprite</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>IsAnimatingOverride</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IgnoreHitTests</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DrawChildrenFirst</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Hidden</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ID</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Alpha</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>1</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CanDrag</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RotationAsDegrees</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AntiAlias</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
