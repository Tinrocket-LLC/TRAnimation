<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2024r1.1" FormatVersion="2" MinIDEVersion="20190300">
<block type="Module" ID="-1068780495">
 <ObjName>TRTween</ObjName>
 <ObjContainerID>51423231</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Reset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1868052479</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Reset(newTweenFunction as TRTweenFunction = nil)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If newTweenFunction &lt;&gt; Nil Then </SourceLine>
   <SourceLine>Dim mode As TRTween.Ease = Me.TF.EaseMode</SourceLine>
   <SourceLine>Me.TF = New TRTweenFunction(mode)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Delay = 0.0</SourceLine>
   <SourceLine>Me.Duration = 1.0</SourceLine>
   <SourceLine>Me.CurrentTime = 0.0</SourceLine>
   <SourceLine>Me.StartValue = 0.0</SourceLine>
   <SourceLine>Me.EndValue = 1.0</SourceLine>
   <SourceLine>Me.ReverseRange = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>newTweenFunction as TRTweenFunction = nil</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>EaseIn</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1399312383</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EaseIn(t as Double) As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#pragma NilObjectChecking False</SourceLine>
   <SourceLine>#pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if me.TF = nil then Return 0.0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.ReverseRange Then</SourceLine>
   <SourceLine>If Me.Duration = 0 Then Return Me.StartValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.StartValue + (Me.TF.EaseIn((Me.Duration - t) / Me.Duration) * (Me.EndValue - Me.StartValue))</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If Me.Duration = 0 Then Return Me.EndValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return me.StartValue + (me.TF.EaseIn(t / me.Duration) * (me.EndValue - me.StartValue))</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>t as Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>EaseOut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>828751871</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EaseOut(t as Double) As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#pragma NilObjectChecking False</SourceLine>
   <SourceLine>#pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if me.TF = nil then Return 0.0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.ReverseRange Then</SourceLine>
   <SourceLine>If Me.Duration = 0 Then Return Me.StartValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.StartValue + (Me.TF.EaseOut((Me.Duration - t) / Me.Duration) * (Me.EndValue - Me.StartValue))</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If Me.Duration = 0 Then Return Me.EndValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return me.StartValue + (me.TF.EaseOut(t / me.Duration) * (me.EndValue - me.StartValue))</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>t as Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>EaseInOut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>468287487</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EaseInOut(t as Double) As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#pragma NilObjectChecking False</SourceLine>
   <SourceLine>#pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.TF = Nil Then Return 0.0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.ReverseRange Then</SourceLine>
   <SourceLine>If Me.Duration = 0 Then Return Me.StartValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.StartValue + (Me.TF.EaseInOut((Me.Duration - t) / Me.Duration) * (Me.EndValue - Me.StartValue))</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If Me.Duration = 0 Then Return Me.EndValue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return me.StartValue + (me.TF.EaseInOut(t / me.Duration) * (me.EndValue - me.StartValue))</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>t as Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1856604159</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(f as TRTweenFunction)</SourceLine>
   <SourceLine>#pragma BackgroundTasks FALSE</SourceLine>
   <SourceLine>#pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#pragma NilObjectChecking False</SourceLine>
   <SourceLine>#pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>me.Reset</SourceLine>
   <SourceLine>me.TF = f</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>f as TRTweenFunction</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IncrementTime</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>632315903</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub IncrementTime(increment as Double)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.ClampInputValues Then</SourceLine>
   <SourceLine>Me.CurrentTime = Min(Max(0.0, Me.CurrentTime + increment), Me.Duration + me.Delay)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Me.CurrentTime = Me.CurrentTime + increment</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>increment as Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>EaseIn</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1767614463</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EaseIn() As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#pragma NilObjectChecking False</SourceLine>
   <SourceLine>#pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.EaseIn(Max(0, Me.CurrentTime - Me.Delay))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>EaseInOut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>580634623</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EaseInOut() As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#pragma NilObjectChecking False</SourceLine>
   <SourceLine>#pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return me.EaseInOut(Max(0, Me.CurrentTime - Me.Delay))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>EaseOut</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>15058943</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function EaseOut() As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#pragma NilObjectChecking False</SourceLine>
   <SourceLine>#pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.EaseOut(Max(0, Me.CurrentTime - Me.Delay))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Value</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>878381055</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Value() As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.Value(Max(0, Me.CurrentTime - Me.Delay))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Value</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1906145279</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Value(t as Double) As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Select Case Me.TF.EaseMode</SourceLine>
   <SourceLine>Case TRTween.Ease.ModeIn</SourceLine>
   <SourceLine>Return Me.EaseIn(t)</SourceLine>
   <SourceLine>Case TRTween.Ease.ModeOut</SourceLine>
   <SourceLine>Return Me.EaseOut(t)</SourceLine>
   <SourceLine>Case TRTween.Ease.ModeInOut</SourceLine>
   <SourceLine>Return Me.EaseInOut(t)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>t as Double</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Progress</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>115347455</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Progress() As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Duration = 0 Then Return 1.0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim v As Double = Max(0.0, Me.CurrentTime - Me.Delay) / Me.Duration</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Work around some floating point issues: We sometimes never reach 1.0</SourceLine>
   <SourceLine>// See: Floating Point v01.xojo_binary_project</SourceLine>
   <SourceLine>Return Ceiling(v * 1000) / 1000</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Note>
  <ItemName>New Tweens</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2126942207</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>New Tweens</NoteLine>
   <NoteLine>Try this variation on what was supposed to be a CircularEaseout (but got messed up)</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>t = t / d - 1.0</NoteLine>
   <NoteLine>Return c * (Sqrt(1.0 - t * t) * t) + b</NoteLine>
  </ItemSource>
  <ItemFlags>1</ItemFlags>
 </Note>
 <Note>
  <ItemName>Version</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1972191231</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Version</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>3/26/06, Incomplete</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>1</ItemFlags>
 </Note>
 <Property>
  <ItemName>StartValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1973055487</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>StartValue As Double = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>StartValue As Double = 0</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>EndValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>917417983</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>EndValue As Double = 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>EndValue As Double = 1</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>CurrentTime</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>7129087</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CurrentTime As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CurrentTime As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>TF</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>28768255</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TF As TRTweenFunction</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TF As TRTweenFunction</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>ReverseRange</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>828348415</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ReverseRange As Boolean</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ReverseRange As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Duration</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>482453503</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Duration As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Duration As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>ClampInputValues</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>504029183</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ClampInputValues As Boolean = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ClampInputValues As Boolean = True</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Delay</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1503539199</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Delay As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Delay As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>StartValue</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EndValue</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CurrentTime</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ReverseRange</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Duration</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ClampInputValues</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Delay</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Enumeration>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>Ease</ItemName>
  <ItemFlags>0</ItemFlags>
  <ItemType>Integer</ItemType>
  <BinaryEnum>0</BinaryEnum>
  <ItemName>Ease</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1555976191</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ModeIn</SourceLine>
   <SourceLine>ModeOut</SourceLine>
   <SourceLine>ModeInOut</SourceLine>
  </ItemSource>
 </Enumeration>
</block>
</RBProject>
