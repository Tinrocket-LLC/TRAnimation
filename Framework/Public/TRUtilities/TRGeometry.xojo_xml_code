<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2024r1.1" FormatVersion="2" MinIDEVersion="20190300">
<block type="Module" ID="835772415">
 <ObjName>TRGeometry</ObjName>
 <ObjContainerID>1091635199</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Copy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1203763199</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Copy(Extends r as Rect) As Rect</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return New Rect(r.Left, r.Top, r.Width, r.Height)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r as Rect</ItemParams>
  <ItemResult>Rect</ItemResult>
 </Method>
 <Method>
  <ItemName>Copy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>364425215</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Copy(Extends p as Point) As Point</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return New Point(p.X, p.Y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends p as Point</ItemParams>
  <ItemResult>Point</ItemResult>
 </Method>
 <Method>
  <ItemName>Inset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>761298943</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Inset(Extends r as Rect, xInset as Double, yInset as Double)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>r.Left = r.Left + xInset</SourceLine>
   <SourceLine>r.Top = r.Top + yInset</SourceLine>
   <SourceLine>r.Width = r.Width - xInset * 2</SourceLine>
   <SourceLine>r.Height = r.Height - yInset * 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r as Rect, xInset as Double, yInset as Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DebugLog</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>9199615</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DebugLog(Extends r as Rect, s as String = "")</SourceLine>
   <SourceLine>Dim prefix As String = "Rect: "</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If s &lt;&gt; "" Then</SourceLine>
   <SourceLine>prefix = s + ": "</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog(prefix + r.Left.ToString + " (left), " + r.Top.ToString + " (top), " + r.Right.ToString + " (right), " + r.Bottom.ToString + " (bottom)")</SourceLine>
   <SourceLine>System.DebugLog(prefix + r.Center.X.ToString + " (x), " + r.Center.Y.ToString + " (y), " + r.Width.ToString + " (width), " + r.Height.ToString + " (height)")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r as Rect, s as String = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Subdivide</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1511438335</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Subdivide(Extends r0 as Rect, r1 as Rect) As Rect()</SourceLine>
   <SourceLine>// r0 is the rect to be subdivided</SourceLine>
   <SourceLine>// r1 is the subdividing rect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim results(-1) As Rect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim safetyOffsetX As Double = Max(r0.Left, r1.Left)</SourceLine>
   <SourceLine>Dim safetyOffseyY As Double = Max(r0.Top, r1.Top)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not r0.Intersects(r1) Then Return results</SourceLine>
   <SourceLine>If r1.Covers(r0) Then</SourceLine>
   <SourceLine>results.Add(New Rect(0, 0, 0, 0)) // We have to return something to indicate that there was an intersection, but no resulting Rect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return results</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If r1.Top - r0.Top &gt; 0 Then</SourceLine>
   <SourceLine>results.Add(New Rect(r0.Left, r0.Top, r0.Width, r1.Top - r0.Top))</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If r0.Bottom - r1.Bottom &gt; 0 Then</SourceLine>
   <SourceLine>results.Add(New Rect(r0.Left, r1.Bottom, r0.Width, r0.Bottom - r1.Bottom))</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim top As Double = Max(r0.Top, r1.Top)</SourceLine>
   <SourceLine>Dim bottom As Double = Min(r0.Bottom, r1.Bottom)</SourceLine>
   <SourceLine>Dim height As Double = bottom - top</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If height &gt; 0 Then</SourceLine>
   <SourceLine>If r1.Left - r0.Left &gt; 0 Then</SourceLine>
   <SourceLine>results.Add(New Rect(r0.Left, top, r1.Left - r0.Left, height))</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If r0.Right - r1.Right &gt; 0 Then</SourceLine>
   <SourceLine>results.Add(New Rect(r1.Right, top, r0.Right - r1.Right, height))</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return results</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r0 as Rect, r1 as Rect</ItemParams>
  <ItemResult>Rect()</ItemResult>
 </Method>
 <Method>
  <ItemName>Subdivide</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1350103039</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Subdivide(Extends r as Rect, rects() as Rect) As Rect()</SourceLine>
   <SourceLine>Dim i, j, k As Integer</SourceLine>
   <SourceLine>Dim currentRects(-1), newRects(-1), r0, r1 As Rect</SourceLine>
   <SourceLine>Dim didFindNewRects As Boolean = True</SourceLine>
   <SourceLine>Dim loopCount, ii, jj As Integer</SourceLine>
   <SourceLine>Dim originalR As Rect = r</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currentRects.Add(R)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While didFindNewRects</SourceLine>
   <SourceLine>nextTry:</SourceLine>
   <SourceLine>didFindNewRects = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For i = 0 To currentRects.LastIndex</SourceLine>
   <SourceLine>r0 = currentRects(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For j = 0 To rects.LastIndex</SourceLine>
   <SourceLine>newRects = r0.Subdivide(rects(j))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Remove any subdivision rects that intersect with other rects</SourceLine>
   <SourceLine>'For k = 1 To currentRects.LastIndex // Starting at 1 to skip R</SourceLine>
   <SourceLine>'For ii = newRects.LastIndex DownTo 0</SourceLine>
   <SourceLine>'r0 = newRects(ii).Copy</SourceLine>
   <SourceLine>'r0.Inset(1, 1)</SourceLine>
   <SourceLine>'If r0.Intersects(currentRects(k)) Then</SourceLine>
   <SourceLine>'newRects.RemoveAt(ii)</SourceLine>
   <SourceLine>'End</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If newRects.Count &gt; 0 Then</SourceLine>
   <SourceLine>// Bug check</SourceLine>
   <SourceLine>// TODO: Implement a hash system for the coordinates based on the largest enclosing rect</SourceLine>
   <SourceLine>'For ii = 0 To newRects.LastIndex</SourceLine>
   <SourceLine>'r0 = newRects(ii)</SourceLine>
   <SourceLine>'For jj = 0 To currentRects.LastIndex</SourceLine>
   <SourceLine>'r1 = currentRects(jj)</SourceLine>
   <SourceLine>'If r0.Equals(r1) Then</SourceLine>
   <SourceLine>'// Due to numerical error, subdivision is now producing the same results over and over</SourceLine>
   <SourceLine>'Return TRGeometry.Subdivide_CleanUp(rects, currentRects)</SourceLine>
   <SourceLine>'End</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Subdivision occured</SourceLine>
   <SourceLine>didFindNewRects = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currentRects.RemoveAt(i) // Remove i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Add pieces</SourceLine>
   <SourceLine>For Each r In newRects</SourceLine>
   <SourceLine>If r.Width &gt; 1 And r.Height &gt; 1 Then</SourceLine>
   <SourceLine>currentRects.Add(r)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'// Debug to find problem</SourceLine>
   <SourceLine>loopCount = loopCount + 1</SourceLine>
   <SourceLine>If loopCount &gt; 100 Then</SourceLine>
   <SourceLine>Return TRGeometry.Subdivide_CleanUp(rects, currentRects)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'r = originalR</SourceLine>
   <SourceLine>'System.DebugLog("Me.Rects.Add(New Rect(" + Str(r.Left) + ", " + Str(r.Top) + ", " + Str(r.Width) + ", " + Str(r.Height) + "))")</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'For k = 0 To rects.LastIndex</SourceLine>
   <SourceLine>'r = rects(k)</SourceLine>
   <SourceLine>'System.DebugLog("Me.Rects.Add(New Rect(" + Str(r.Left) + ", " + Str(r.Top) + ", " + Str(r.Width) + ", " + Str(r.Height) + "))")</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'System.DebugLog("Problems")</SourceLine>
   <SourceLine>'For k = 0 To currentRects.LastIndex</SourceLine>
   <SourceLine>'r = currentRects(k)</SourceLine>
   <SourceLine>'System.DebugLog("(" + Str(r.Left) + ", " + Str(r.Top) + ", " + Str(r.Width) + ", " + Str(r.Height) + ")")</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'Break</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>GoTo nextTry</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'System.DebugLog("---")</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'r = originalR</SourceLine>
   <SourceLine>'System.DebugLog("Me.Rects.Add(New Rect(" + Str(r.Left) + ", " + Str(r.Top) + ", " + Str(r.Width) + ", " + Str(r.Height) + "))")</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'For k = 0 To rects.LastIndex</SourceLine>
   <SourceLine>'r = rects(k)</SourceLine>
   <SourceLine>'System.DebugLog("Me.Rects.Add(New Rect(" + Str(r.Left) + ", " + Str(r.Top) + ", " + Str(r.Width) + ", " + Str(r.Height) + "))")</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'System.DebugLog("subdiv rects:")</SourceLine>
   <SourceLine>'For k = 0 To currentRects.LastIndex</SourceLine>
   <SourceLine>'r = currentRects(k)</SourceLine>
   <SourceLine>'System.DebugLog("(" + Str(r.Left) + ", " + Str(r.Top) + ", " + Str(r.Width) + ", " + Str(r.Height) + ")")</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return TRGeometry.Subdivide_CleanUp(rects, currentRects)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r as Rect, rects() as Rect</ItemParams>
  <ItemResult>Rect()</ItemResult>
 </Method>
 <Method>
  <ItemName>Subdivide_BUGGY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>331741183</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Subdivide_BUGGY(Extends r0 as Rect, r1 as Rect) As Rect()</SourceLine>
   <SourceLine>Dim results(-1) As Rect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Const kEpsilon As Double = 0.0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not r0.Intersects(r1) Then Return results</SourceLine>
   <SourceLine>If r0 = r1 Then Return results</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If (r1.Top - r0.Top) &gt; kEpsilon Then</SourceLine>
   <SourceLine>results.Add(New Rect(r0.Left, r0.Top, r0.Width, r1.Top - r0.Top))</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If (r0.Bottom - r1.Bottom) &gt; kEpsilon Then</SourceLine>
   <SourceLine>results.Add(New Rect(r0.Left, r1.Bottom, r0.Width, r0.Bottom - r1.Bottom))</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim top As Double = Max(r0.Top, r1.Top)</SourceLine>
   <SourceLine>Dim bottom As Double = Min(r0.Bottom, r1.Bottom)</SourceLine>
   <SourceLine>Dim height As Double = bottom - top</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If height &gt; 0 Then</SourceLine>
   <SourceLine>If (r1.Left - r0.Left) &gt; kEpsilon Then</SourceLine>
   <SourceLine>results.Add(New Rect(r0.Left, top , r1.Left - r0.Left, height))</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If (r0.Right - r1.Right) &gt; kEpsilon Then</SourceLine>
   <SourceLine>results.Add(New Rect(r1.Right, top, r0.Right - r1.Right, height))</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return results</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r0 as Rect, r1 as Rect</ItemParams>
  <ItemResult>Rect()</ItemResult>
 </Method>
 <Method>
  <ItemName>Subdivide_CleanUp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1839321087</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Subdivide_CleanUp(dividingRects() as Rect, subdivedRects() as Rect) As Rect()</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'Return subdivedRects</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return TRGeometry.Merge(subdivedRects)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>dividingRects() as Rect, subdivedRects() as Rect</ItemParams>
  <ItemResult>Rect()</ItemResult>
 </Method>
 <Method>
  <ItemName>Subdivide_BUGGY2</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>63944703</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Subdivide_BUGGY2(Extends r as Rect, rects() as Rect) As Rect()</SourceLine>
   <SourceLine>Dim i, j, k As Integer</SourceLine>
   <SourceLine>Dim currentRects(-1), newRects(-1), r0, r1 As Rect</SourceLine>
   <SourceLine>Dim didFindNewRects As Boolean = True</SourceLine>
   <SourceLine>Dim loopCount, ii, jj As Integer</SourceLine>
   <SourceLine>Dim originalR As Rect = r</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currentRects.Add(R)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While didFindNewRects</SourceLine>
   <SourceLine>nextTry:</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>didFindNewRects = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For i = 0 To currentRects.LastIndex</SourceLine>
   <SourceLine>r0 = currentRects(i)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For j = 0 To rects.LastIndex</SourceLine>
   <SourceLine>newRects = r0.Subdivide(rects(j))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Remove any subdivision rects that intersect with other rects</SourceLine>
   <SourceLine>'For k = 1 To currentRects.LastIndex // Starting at 1 to skip R</SourceLine>
   <SourceLine>'For ii = newRects.LastIndex DownTo 0</SourceLine>
   <SourceLine>'r0 = newRects(ii).Copy</SourceLine>
   <SourceLine>'r0.Inset(1, 1)</SourceLine>
   <SourceLine>'If r0.Intersects(currentRects(k)) Then</SourceLine>
   <SourceLine>'newRects.RemoveAt(ii)</SourceLine>
   <SourceLine>'End</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If newRects.Count &gt; 0 Then</SourceLine>
   <SourceLine>// Bug check</SourceLine>
   <SourceLine>// TODO: Implement a hash system for the coordinates based on the largest enclosing rect</SourceLine>
   <SourceLine>For ii = 0 To newRects.LastIndex</SourceLine>
   <SourceLine>r0 = newRects(ii)</SourceLine>
   <SourceLine>For jj = 0 To currentRects.LastIndex</SourceLine>
   <SourceLine>r1 = currentRects(jj)</SourceLine>
   <SourceLine>If r0.Left = r1.Left And r0.Top = r1.Top And r0.Width = r1.Width And r0.Height = r1.Height Then</SourceLine>
   <SourceLine>// Due to numerical error, subdivision is now producing the same results over and over</SourceLine>
   <SourceLine>Return currentRects</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Subdivision occured</SourceLine>
   <SourceLine>didFindNewRects = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currentRects.RemoveAt(i) // Remove i</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Add pieces</SourceLine>
   <SourceLine>For Each r In newRects</SourceLine>
   <SourceLine>currentRects.Add(r)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'// Debug to find problem</SourceLine>
   <SourceLine>'loopCount = loopCount + 1</SourceLine>
   <SourceLine>'If loopCount &gt; 50 Then</SourceLine>
   <SourceLine>''Return currentRects</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'r = originalR</SourceLine>
   <SourceLine>'System.DebugLog("Me.Rects.Add(New Rect(" + Str(r.Left) + ", " + Str(r.Top) + ", " + Str(r.Width) + ", " + Str(r.Height) + "))")</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'For k = 0 To rects.LastIndex</SourceLine>
   <SourceLine>'r = rects(k)</SourceLine>
   <SourceLine>'System.DebugLog("Me.Rects.Add(New Rect(" + Str(r.Left) + ", " + Str(r.Top) + ", " + Str(r.Width) + ", " + Str(r.Height) + "))")</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'System.DebugLog("Problems")</SourceLine>
   <SourceLine>'For k = 0 To currentRects.LastIndex</SourceLine>
   <SourceLine>'r = currentRects(k)</SourceLine>
   <SourceLine>'System.DebugLog("(" + Str(r.Left) + ", " + Str(r.Top) + ", " + Str(r.Width) + ", " + Str(r.Height) + ")")</SourceLine>
   <SourceLine>'Next</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'Break</SourceLine>
   <SourceLine>'End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>GoTo nextTry</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return currentRects</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r as Rect, rects() as Rect</ItemParams>
  <ItemResult>Rect()</ItemResult>
 </Method>
 <Method>
  <ItemName>Equals</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1488207871</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Equals(Extends r0 as Rect, r1 as Rect) As Boolean</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return r0.Left = r1.Left And r0.Top = r1.Top And r0.Width = r1.Width And r0.Height = r1.Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r0 as Rect, r1 as Rect</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Covers</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1195403263</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Covers(Extends r0 as Rect, r1 as Rect) As Boolean</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return r0.Left &lt;= r1.Left And r0.Top &lt;= r1.Top And r0.Right &gt;= r1.Right And r0.Bottom &gt;= r1.Bottom</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r0 as Rect, r1 as Rect</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Merge</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1358057471</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Merge(rectsToMerge() as Rect, toleranceFraction as Double = 0.01) As Rect()</SourceLine>
   <SourceLine>// Merge rects with shared edges</SourceLine>
   <SourceLine>Dim i, j as Integer</SourceLine>
   <SourceLine>Dim didMerge As Boolean = True</SourceLine>
   <SourceLine>Dim r0, r1, r2 As Rect</SourceLine>
   <SourceLine>Dim removeRects As New Set</SourceLine>
   <SourceLine>Dim mergedRects As New Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>While didMerge</SourceLine>
   <SourceLine>nextTry:</SourceLine>
   <SourceLine>didMerge = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If removeRects.Count &gt; 0 Then</SourceLine>
   <SourceLine>For i = rectsToMerge.lastIndex DownTo 0</SourceLine>
   <SourceLine>If removeRects.HasMember(rectsToMerge(i)) Then</SourceLine>
   <SourceLine>rectsToMerge.RemoveAt(i)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>removeRects.RemoveAll</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If mergedRects.Count &gt; 0 Then</SourceLine>
   <SourceLine>For Each r0 In mergedRects.ToArray</SourceLine>
   <SourceLine>rectsToMerge.Add(r0)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mergedRects.RemoveAll</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If rectsToMerge.Count &lt; 2 Then</SourceLine>
   <SourceLine>Return rectsToMerge</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For i = 0 To rectsToMerge.lastIndex</SourceLine>
   <SourceLine>r0 = rectsToMerge(i)</SourceLine>
   <SourceLine>For j = i+1 To rectsToMerge.lastIndex</SourceLine>
   <SourceLine>r1 = rectsToMerge(j)</SourceLine>
   <SourceLine>r2 = r0.Union(r1) // Merge the rect first, then run tests to see if it's a substitution</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim tolerance As Double = Max(r2.Width, r2.Height) * toleranceFraction // Match edges to within percent</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Abs(r2.Width - Min(r0.Width, r1.Width)) &lt;= tolerance Then</SourceLine>
   <SourceLine>// r0 and r1 are vertically aligned and appoximately the same width</SourceLine>
   <SourceLine>If Abs((r0.Height + r1.Height) - r2.Height) &lt;= tolerance Then</SourceLine>
   <SourceLine>// Same width; coincident edge</SourceLine>
   <SourceLine>removeRects.Add(r0)</SourceLine>
   <SourceLine>removeRects.Add(r1)</SourceLine>
   <SourceLine>mergedRects.Add(r2)</SourceLine>
   <SourceLine>didMerge = True</SourceLine>
   <SourceLine>GoTo nextTry</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>ElseIf Abs(r2.Height - Min(r0.Height, r1.Height)) &lt;= tolerance Then</SourceLine>
   <SourceLine>// r0 and r1 are horizontally aligned and appoximately the same height</SourceLine>
   <SourceLine>If Abs((r0.Width + r1.Width) - r2.Width) &lt;= tolerance Then</SourceLine>
   <SourceLine>// Same height coincident edge</SourceLine>
   <SourceLine>removeRects.Add(r0)</SourceLine>
   <SourceLine>removeRects.Add(r1)</SourceLine>
   <SourceLine>mergedRects.Add(r2)</SourceLine>
   <SourceLine>didMerge = True</SourceLine>
   <SourceLine>GoTo nextTry</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return rectsToMerge</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>rectsToMerge() as Rect, toleranceFraction as Double = 0.01</ItemParams>
  <ItemResult>Rect()</ItemResult>
 </Method>
 <Method>
  <ItemName>AlignCenter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1619118079</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AlignCenter(Extends r as Rect)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>r.Left = -r.Width / 2</SourceLine>
   <SourceLine>r.Top = -r.Height / 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r as Rect</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AlignTopLeft</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>205524991</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AlignTopLeft(Extends r as Rect)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>r.Left = 0</SourceLine>
   <SourceLine>r.Top = 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r as Rect</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Scale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2034388991</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Scale(Extends r as Rect, xScale as Double, yScale as Double)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking False</SourceLine>
   <SourceLine>#Pragma NilObjectChecking False</SourceLine>
   <SourceLine>#Pragma BoundsChecking False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>r.Left = r.Left * xScale</SourceLine>
   <SourceLine>r.Top = r.Top * yScale</SourceLine>
   <SourceLine>r.Width = r.Width * xScale</SourceLine>
   <SourceLine>r.Height = r.Height * yScale</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r as Rect, xScale as Double, yScale as Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constrain</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>335896575</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Constrain(Extends r0 as Rect, r1 as Rect) As Rect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim minAspectFillScale As Double = Max(1.0, Max(r0.Width / r1.Width, r0.Height / r1.Height))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim r1c As New Rect(r1.Left, r1.Top, r1.Width, r1.Height)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Aspect Fill</SourceLine>
   <SourceLine>r1c.Width = r1c.Width * minAspectFillScale</SourceLine>
   <SourceLine>r1c.Height = r1c.Height * minAspectFillScale</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>r1c.Left = Min(r1c.Left, r0.Left)</SourceLine>
   <SourceLine>r1c.Top = Min(r1c.Top, r0.Top)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>r1c.Left = r1c.Left + Max(0, r0.Right - r1c.Right) // Constrain right</SourceLine>
   <SourceLine>r1c.Top = r1c.Top + Max(0, r0.Bottom - r1c.Bottom) // Constrain bottom</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return r1c</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>Extends r0 as Rect, r1 as Rect</ItemParams>
  <ItemResult>Rect</ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Enumeration>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>Direction</ItemName>
  <ItemFlags>1</ItemFlags>
  <ItemType>Integer</ItemType>
  <BinaryEnum>0</BinaryEnum>
  <ItemName>Direction</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>166195199</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>None</SourceLine>
   <SourceLine>Top</SourceLine>
   <SourceLine>TopRight</SourceLine>
   <SourceLine>Right</SourceLine>
   <SourceLine>BottomRight</SourceLine>
   <SourceLine>Bottom</SourceLine>
   <SourceLine>BottomLeft</SourceLine>
   <SourceLine>Left</SourceLine>
   <SourceLine>TopLeft</SourceLine>
  </ItemSource>
 </Enumeration>
</block>
</RBProject>
