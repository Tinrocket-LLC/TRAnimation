<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2023r2" FormatVersion="2" MinIDEVersion="20210300">
<block type="Module" ID="729042943">
 <ObjName>TRAnimationCanvasCore</ObjName>
 <ObjContainerID>1455699967</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>TRAnimationTimerDelegate</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2083465215</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(uc as TRAnimationCanvasDelegate)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.UniversalCanvas = uc</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Camera = New TRAnimationCameraSprite</SourceLine>
   <SourceLine>Me.HitSprite = New TRAnimationHitSprite</SourceLine>
   <SourceLine>Me.SceneRoot = New TRAnimationSprite</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>RaiseEvent Initialize</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>uc as TRAnimationCanvasDelegate</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>InverseScreenScale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>991586303</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function InverseScreenScale(sprite as TRAnimationSprite) As TRVector2D</SourceLine>
   <SourceLine>// Computes inverse screen scale; Multiply drawing by this value to draw 1:1 in screen points</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim s1 As TRVector2D = sprite.Scale</SourceLine>
   <SourceLine>Dim s2 As TRVector2D = Me.Camera.CurrentWorldTransform.Scale</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return New TRVector2D(1.0 / (s1.X * s2.X), 1.0 / (s1.Y * s2.Y))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>sprite as TRAnimationSprite</ItemParams>
  <ItemResult>TRVector2D</ItemResult>
 </Method>
 <Method>
  <ItemName>Start</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1055436799</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Start()</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode </SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.UniversalCanvas.TRAnimationCanvasDelegate_Refresh // Force a refresh just in case there's no animation</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#If TargetMobileDevice Or TargetMobileSimulator</SourceLine>
   <SourceLine>Me.AnimationTimer = New TRAnimationTimerMobile</SourceLine>
   <SourceLine>#ElseIf TargetDesktop</SourceLine>
   <SourceLine>Me.AnimationTimer = New TRAnimationTimerDesktop</SourceLine>
   <SourceLine>#EndIf</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.AnimationTimer.FPS = Me.FPS</SourceLine>
   <SourceLine>Me.AnimationTimer.AnimationDelegate = Me</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Stop</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1894311935</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Stop()</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// BUG: Can't stop the animation timer! It keeps firing. Must .Kill it an nil it out. </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.AnimationTimer &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Me.AnimationTimer.Kill</SourceLine>
   <SourceLine>Me.AnimationTimer = Nil</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleEvent_Paint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1351768063</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleEvent_Paint(g as Graphics)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim elapsedTime As Double = 0.0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Self.AnimationTimer &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Self.AnimationTimer.BeginPaintEvent</SourceLine>
   <SourceLine>elapsedTime = Self.AnimationTimer.ElapsedSeconds</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawingColor = Me.UniversalCanvas.TRAnimationCanvasDelegate_BackgroundColor</SourceLine>
   <SourceLine>g.FillRectangle(0, 0, g.Width, g.Height)</SourceLine>
   <SourceLine>g.DrawingColor = Color.Black</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim viewport As Rect = New Rect(0, 0, g.Width, g.Height)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'System.DebugLog(elapsedTime.ToString)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Camera.NextFrame(g, Me, Nil, New TRAffineTransform, elapsedTime)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim t As TRAffineTransform = Me.Camera.CurrentWorldTransform</SourceLine>
   <SourceLine>Dim p As TRVector2D = t.Position</SourceLine>
   <SourceLine>g.Translate(p.X, p.Y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>p = t.Scale</SourceLine>
   <SourceLine>g.Scale(p.X, p.Y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.SaveState</SourceLine>
   <SourceLine>Me.SceneRoot.NextFrame(g, Me, Nil, New TRAffineTransform, elapsedTime)</SourceLine>
   <SourceLine>g.RestoreState</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.SaveState</SourceLine>
   <SourceLine>RaiseEvent NextFrame(g, elapsedTime)</SourceLine>
   <SourceLine>Me.UniversalCanvas.TRAnimationCanvasDelegate_Raise_NextFrame(g, elapsedTime)</SourceLine>
   <SourceLine>g.RestoreState</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.DebugDrawBounds Then</SourceLine>
   <SourceLine>Me.HandleEvent_Paint_DebugDrawBounds(g)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>g as Graphics</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleEvent_Paint_DebugDrawBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1239156735</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleEvent_Paint_DebugDrawBounds(g as Graphics)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim inverseScale As Double = Me.InverseScreenScale(me.SceneRoot).X</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim results(-1) As TRAnimationSprite</SourceLine>
   <SourceLine>Me.SceneRoot.Flatten(results)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawingColor = DebugDrawBoundsColor</SourceLine>
   <SourceLine>g.PenSize = 1.0 * inverseScale</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each child As TRAnimationSprite In results</SourceLine>
   <SourceLine>Dim bounds As TRAnimationBounds = child.WorldBounds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bounds &lt;&gt; Nil Then</SourceLine>
   <SourceLine>g.FillOval(-3 + bounds.Position.X, -3 + bounds.Position.Y, 5, 5)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawOval(bounds.Position.X - bounds.Radius, bounds.Position.Y - bounds.Radius, bounds.Radius * 2, bounds.Radius * 2)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If bounds.AABB &lt;&gt; Nil Then</SourceLine>
   <SourceLine>g.DrawRectangle(bounds.AABB.Left, bounds.AABB.Top, bounds.AABB.Width, bounds.AABB.Height)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>g as Graphics</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>TRAnimationTimerDelegate_NeedsAnimation</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>666769407</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function TRAnimationTimerDelegate_NeedsAnimation(timer as TRAnimationTimer) As Boolean</SourceLine>
   <SourceLine>// Part of the TRAnimationTimerDelegate interface.</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode </SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim isAnimating As Boolean = Me.IsAnimatingOverride Or Me.SceneRoot.IsAnimating Or Me.Camera.IsAnimating</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Test pause when not animating</SourceLine>
   <SourceLine>'Dim p As Picture</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'If isAnimating Then</SourceLine>
   <SourceLine>'p = Picture.SystemImage("hare.fill", 18, Picture.SystemImageWeights.Regular, Color.RGB(0, 191, 0))</SourceLine>
   <SourceLine>'Else</SourceLine>
   <SourceLine>'p = Picture.SystemImage("pause.fill", 18, Picture.SystemImageWeights.Regular, Color.RGB(63, 127, 191))</SourceLine>
   <SourceLine>'End</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'PTEditorScreen(App.CurrentLayout.Content).ImageViewer1.Image = p</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return isAnimating</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>timer as TRAnimationTimer</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>TRAnimationTimerDelegate_UpdateNow</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1443983359</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub TRAnimationTimerDelegate_UpdateNow(timer as TRAnimationTimer)</SourceLine>
   <SourceLine>// Part of the TRAnimationTimerDelegate interface.</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.UniversalCanvas.TRAnimationCanvasDelegate_Refresh</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>timer as TRAnimationTimer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleEvent_PointerDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>202020863</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleEvent_PointerDown(screenPosition as TRVector2D, worldPosition as TRVector2D)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.IsAnimatingOverride = True</SourceLine>
   <SourceLine>Me.PointerDownBeginMicroseconds = System.Microseconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.DragStartPointWorld = worldPosition.Copy</SourceLine>
   <SourceLine>Me.DragDistanceMax = 0</SourceLine>
   <SourceLine>Me.mDragInProgress = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.HitSprite = Me.SceneRoot.HitTest(screenPosition, worldPosition, New TRAffineTransform)</SourceLine>
   <SourceLine>If Me.HitSprite &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Me.HitSprite.UpdateDragPoint(worldPosition)</SourceLine>
   <SourceLine>Me.HitSprite.DragStartPointWorld = Me.DragStartPointWorld</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>RaiseEvent PointerDown(screenPosition, worldPosition)</SourceLine>
   <SourceLine>Me.UniversalCanvas.TRAnimationCanvasDelegate_Raise_PointerDown(screenPosition, worldPosition)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>screenPosition as TRVector2D, worldPosition as TRVector2D</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleEvent_PointerDrag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>964227071</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleEvent_PointerDrag(screenPosition as TRVector2D, worldPosition as TRVector2D)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.IsAnimatingOverride = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim downDurationSeconds As Double = (System.Microseconds - Me.PointerDownBeginMicroseconds) / 1000000.0</SourceLine>
   <SourceLine>Me.DragDistanceMax = Max(Me.DragDistanceMax, TRVector2D.Distance(worldPosition, Me.DragStartPointWorld))</SourceLine>
   <SourceLine>Me.mDragInProgress = downDurationSeconds &gt;= Me.DragDelaySecondsThreshold And Me.DragDistanceMax &gt; Me.DragDistanceThreshold</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.DragInProgress Then</SourceLine>
   <SourceLine>If Me.HitSprite &lt;&gt; Nil And Me.HitSprite.Item.CanDrag Then</SourceLine>
   <SourceLine>Me.HitSprite.UpdateDragPoint(worldPosition)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'System.DebugLog("Drag")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>RaiseEvent PointerDrag(screenPosition, worldPosition)</SourceLine>
   <SourceLine>Me.UniversalCanvas.TRAnimationCanvasDelegate_Raise_PointerDrag(screenPosition, worldPosition)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>screenPosition as TRVector2D, worldPosition as TRVector2D</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HandleEvent_PointerUp</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1042665471</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub HandleEvent_PointerUp(screenPosition as TRVector2D, worldPosition as TRVector2D)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim downDurationSeconds As Double = (System.Microseconds - Me.PointerDownBeginMicroseconds) / 1000000.0</SourceLine>
   <SourceLine>Me.PointerDownBeginMicroseconds = -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not Me.DragInProgress And downDurationSeconds &lt; Me.TapDurationThreshold Then</SourceLine>
   <SourceLine>'System.DebugLog("Tap " + Me.DragDistanceMax.ToString)</SourceLine>
   <SourceLine>'System.DebugLog("Tap")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>RaiseEvent PointerTap(screenPosition, worldPosition)</SourceLine>
   <SourceLine>Me.UniversalCanvas.TRAnimationCanvasDelegate_Raise_PointerTap(screenPosition, worldPosition)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'System.DebugLog("Drag " + Me.DragDistanceMax.ToString)</SourceLine>
   <SourceLine>'System.DebugLog("Up")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>RaiseEvent PointerUp(screenPosition, worldPosition)</SourceLine>
   <SourceLine>Me.UniversalCanvas.TRAnimationCanvasDelegate_Raise_PointerUp(screenPosition, worldPosition)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.IsAnimatingOverride = False</SourceLine>
   <SourceLine>Me.mDragInProgress = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Start</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>screenPosition as TRVector2D, worldPosition as TRVector2D</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Refresh</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>911161343</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Refresh()</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.UniversalCanvas.TRAnimationCanvasDelegate_Refresh</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Width</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>284463103</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Width() As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.UniversalCanvas.TRAnimationCanvasDelegate_Width</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>Height</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1744570367</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Height() As Double</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.UniversalCanvas.TRAnimationCanvasDelegate_Height</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>UpdateLayout</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>285702143</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub UpdateLayout()</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>RaiseEvent UpdateLayout</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Hook>
  <ItemName>NextFrame</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>g as Graphics, elapsedTime as Double</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PointerDown</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>screenPosition as TRVector2D, worldPosition as TRVector2D</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PointerDrag</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>screenPosition as TRVector2D, worldPosition as TRVector2D</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PointerTap</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>screenPosition as TRVector2D, worldPosition as TRVector2D</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>PointerUp</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>screenPosition as TRVector2D, worldPosition as TRVector2D</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>Initialize</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Hook>
  <ItemName>UpdateLayout</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Property>
  <ItemName>Camera</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>558856191</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Camera As TRAnimationCameraSprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Camera As TRAnimationCameraSprite</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>HitSprite</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>195088383</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HitSprite As TRAnimationHitSprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HitSprite As TRAnimationHitSprite</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>SceneRoot</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1785819135</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>SceneRoot As TRAnimationSprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>SceneRoot As TRAnimationSprite</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>AnimationTimer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1106071551</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AnimationTimer As TRAnimationTimer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AnimationTimer As TRAnimationTimer</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DragDistanceMax</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>871467007</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DragDistanceMax As Double = 0</SourceLine>
   <SourceLine>Make &gt;1 To prevent False drag events from firing</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DragDistanceMax As Double = 0</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DragDistanceThreshold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1771294719</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DragDistanceThreshold As Double = 1.0</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DragDistanceThreshold As Double = 1.0</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DragStartPointWorld</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>391139327</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DragStartPointWorld As TRVector2D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DragStartPointWorld As TRVector2D</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>FPS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2111985663</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>FPS As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>FPS As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mFPS = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.AnimationTimer &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Me.AnimationTimer.FPS = mFPS</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return mFPS</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>IsAnimatingOverride</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>299063295</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsAnimatingOverride As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsAnimatingOverride As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IsPointerDown</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1249185791</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsPointerDown As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsPointerDown As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.PointerDownBeginMicroseconds &gt; 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>mFPS</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1864091647</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mFPS As Double = 60</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mFPS As Double = 60</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>PointerDownBeginMicroseconds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>183982079</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>PointerDownBeginMicroseconds As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>PointerDownBeginMicroseconds As Double</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>PointerDownDuration</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1918425087</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>PointerDownDuration As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>PointerDownDuration As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>// Return seconds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.PointerDownBeginMicroseconds &gt; 0 Then</SourceLine>
   <SourceLine>Return (System.Microseconds - Me.PointerDownBeginMicroseconds) / kMillion</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>UniversalCanvas</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>77549567</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>UniversalCanvas As TRAnimationCanvasDelegate</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>UniversalCanvas As TRAnimationCanvasDelegate</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>mDragInProgress</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1292337151</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mDragInProgress As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mDragInProgress As Boolean</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DragDelaySecondsThreshold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1496909823</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DragDelaySecondsThreshold As Double = 0.1</SourceLine>
   <SourceLine>Make &gt;0.0 To prevent False drag events from firing</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DragDelaySecondsThreshold As Double = 0.1</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>TapDurationThreshold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>119805951</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TapDurationThreshold As Double = 0.5</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TapDurationThreshold As Double = 0.5</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DebugDrawBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>465352703</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DebugDrawBounds As Boolean = False</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DebugDrawBounds As Boolean = False</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DebugDrawBoundsColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>492795903</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DebugDrawBoundsColor As Color = Color.Black</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DebugDrawBoundsColor As Color = Color.Black</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DragInProgress</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1129191423</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Property DragInProgress As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DragInProgress As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.mDragInProgress</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DragDistanceThreshold</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>1.0</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>FPS</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsPointerDown</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>PointerDownDuration</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DragDelaySecondsThreshold</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0.0</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TapDurationThreshold</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0.5</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DebugDrawBounds</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DebugDrawBoundsColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;c000000</PropertyValue>
   <ItemType>Color</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
