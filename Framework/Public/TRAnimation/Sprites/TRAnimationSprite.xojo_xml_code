<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2024r1.1" FormatVersion="2" MinIDEVersion="20190300">
<block type="Module" ID="208971775">
 <ObjName>TRAnimationSprite</ObjName>
 <ObjContainerID>1751595007</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>TRAnimationBehaviorDelegate</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>NextFrame</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1604409343</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub NextFrame(g as Graphics, core as TRAnimationCanvasCore, parent as TRAnimationSprite, currentWorldTransform as TRAffineTransform, elapsedTime as Double)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.mParent = New WeakRef(parent)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Hidden Then</SourceLine>
   <SourceLine>If core.RenderDelegate &lt;&gt; Nil Then</SourceLine>
   <SourceLine>core.RenderDelegate.TRAnimationCanvasRendererDelegate_Hide(Me)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim child As TRAnimationSprite</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.SaveState</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If core.RenderDelegate = Nil Then</SourceLine>
   <SourceLine>// This is only needed when were rendering to graphics</SourceLine>
   <SourceLine>g.AntiAliased = Me.AntiAlias</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// "Translate, Rotate, Scale" https://gamedev.stackexchange.com/a/29265</SourceLine>
   <SourceLine>g.Translate(Me.Position.X, Me.Position.Y)</SourceLine>
   <SourceLine>g.Rotate(Me.RotationAsDegrees * kRadian)</SourceLine>
   <SourceLine>g.Scale(Me.Scale.X, Me.Scale.Y)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Transparency always propagates to children through graphics</SourceLine>
   <SourceLine>g.Transparency = 100 - ((100 - g.Transparency) * Me.Alpha)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.CurrentLocalTransform.Reset</SourceLine>
   <SourceLine>Me.CurrentLocalTransform.Translate(Me.Position.X, Me.Position.Y)</SourceLine>
   <SourceLine>Me.CurrentLocalTransform.Rotate(Me.RotationAsDegrees * kRadian)</SourceLine>
   <SourceLine>Me.CurrentLocalTransform.Scale(Me.Scale.X, Me.Scale.Y)</SourceLine>
   <SourceLine>Me.CurrentWorldTransform = TRAffineTransform.Concat(Me.CurrentLocalTransform, currentWorldTransform)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.NextFrameOverrideBackground(g, core, Me.CurrentWorldTransform, elapsedTime)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If DrawChildrenFirst Then</SourceLine>
   <SourceLine>For Each child In Me.Children</SourceLine>
   <SourceLine>child.NextFrame(g, core, Me, Me.CurrentWorldTransform, elapsedTime)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.NextFrameOverride(g, core, Me.CurrentWorldTransform, elapsedTime)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If core.RenderDelegate &lt;&gt; Nil Then</SourceLine>
   <SourceLine>core.RenderDelegate.TRAnimationCanvasRendererDelegate_NextFrame(Me, core, g, Me.CurrentWorldTransform)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Me.NextFrameOverride(g, core, Me.CurrentWorldTransform, elapsedTime)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If core.RenderDelegate &lt;&gt; Nil Then</SourceLine>
   <SourceLine>core.RenderDelegate.TRAnimationCanvasRendererDelegate_NextFrame(Me, core, g, Me.CurrentWorldTransform)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each child In Me.Children</SourceLine>
   <SourceLine>child.NextFrame(g, core, Me, Me.CurrentWorldTransform, elapsedTime)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Run behaviors</SourceLine>
   <SourceLine>If Not Me.Behaviors.HasKey(Me.kTargetBehaviorKey) And Me.TargetBehaviorQueue.Count &gt; 0 Then</SourceLine>
   <SourceLine>// Always a 1 frame delay between consecutive actions to let the previous action finish</SourceLine>
   <SourceLine>Dim t As TRAnimationBehaviorTarget = Me.TargetBehaviorQueue(0)</SourceLine>
   <SourceLine>Me.TargetBehaviorQueue.RemoveAt(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>t.StartAlpha = Me.Alpha</SourceLine>
   <SourceLine>t.StartScale = Me.Scale.Copy</SourceLine>
   <SourceLine>t.StartPosition = Me.Position.Copy</SourceLine>
   <SourceLine>t.StartRotationAsDegrees = Me.RotationAsDegrees</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.TargetBehavior = t</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// TODO: Run default target behavior first?</SourceLine>
   <SourceLine>Dim keys(-1) As Variant = Me.Behaviors.Keys</SourceLine>
   <SourceLine>For i As Integer = 0 To keys.LastIndex</SourceLine>
   <SourceLine>Dim b As TRAnimationBehavior = Me.Behaviors.Value(keys(i))</SourceLine>
   <SourceLine>If b.isComplete Then</SourceLine>
   <SourceLine>b.WillBeRemoved</SourceLine>
   <SourceLine>Me.Behaviors.Remove(keys(i))</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'System.DebugLog("Run Animation: " + keys(i) + ", Wait for: " + b.WaitForSignal + ", When complete: " + b.isCompleteSignal)</SourceLine>
   <SourceLine>'System.DebugLog(b.WaitForSignal + ", " + b.isCompleteSignal)</SourceLine>
   <SourceLine>b.NextFrame(elapsedTime)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Clean up</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.RestoreState</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If core.RenderDelegate &lt;&gt; Nil Then</SourceLine>
   <SourceLine>For Each child In Me.DeleteQueue</SourceLine>
   <SourceLine>// Make sure all children are removed from the delegate renderer</SourceLine>
   <SourceLine>Dim allChildren(-1) As TRAnimationSprite</SourceLine>
   <SourceLine>child.Flatten(allChildren)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each subChild As TRAnimationSprite In allChildren</SourceLine>
   <SourceLine>core.RenderDelegate.TRAnimationCanvasRendererDelegate_RemoveFromScene(subChild)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>core.RenderDelegate.TRAnimationCanvasRendererDelegate_RemoveFromScene(child)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.DeleteQueue.ResizeTo(-1)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>g as Graphics, core as TRAnimationCanvasCore, parent as TRAnimationSprite, currentWorldTransform as TRAffineTransform, elapsedTime as Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>932833279</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.AntiAlias = True</SourceLine>
   <SourceLine>Me.Behaviors = New Dictionary</SourceLine>
   <SourceLine>Me.Center = New TRVector2D</SourceLine>
   <SourceLine>Me.Position = New TRVector2D</SourceLine>
   <SourceLine>Me.Scale = New TRVector2D(1, 1)</SourceLine>
   <SourceLine>Me.CurrentLocalTransform = New TRAffineTransform</SourceLine>
   <SourceLine>Me.CurrentWorldTransform = New TRAffineTransform</SourceLine>
   <SourceLine>Me.ID = TRCounter.NextValue("TRAnimationSprite.ID")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.RenderBufferOffset = New TRVector2D // Related to the optional RenderBuffer as Picture property; controls how the RenderBuffer is translated when drawn</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HitTest</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>432439295</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HitTest(screenP as TRVector2D, worldP as TRVector2D, currentWorldTransform as TRAffineTransform) As TRAnimationHitSprite</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Hidden Or Me.IgnoreHitTests Then</SourceLine>
   <SourceLine>Return Nil</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer</SourceLine>
   <SourceLine>Dim child As TRAnimationSprite</SourceLine>
   <SourceLine>Dim hit As TRAnimationHitSprite</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim newWorldTransform As TRAffineTransform = TRAffineTransform.Concat(Me.CurrentLocalTransform, currentWorldTransform)</SourceLine>
   <SourceLine>Dim localP As TRVector2D = newWorldTransform.Inverse.ApplyAffineTransform(worldP)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For i = Me.Children.LastIndex DownTo 0</SourceLine>
   <SourceLine>child = Me.Children(i)</SourceLine>
   <SourceLine>hit = child.HitTest(screenP, worldP, newWorldTransform)</SourceLine>
   <SourceLine>If hit &lt;&gt; Nil Then Return hit</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.HitTestOverride(screenP, worldP, localP) Then</SourceLine>
   <SourceLine>Me.DebugLastHitPoint = localP</SourceLine>
   <SourceLine>Me.DebugLastDragPoint = Nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>hit = New TRAnimationHitSprite</SourceLine>
   <SourceLine>hit.Item = Me</SourceLine>
   <SourceLine>hit.UserData = Me.HitTestUserData</SourceLine>
   <SourceLine>hit.CurrentWorldTransform = newWorldTransform</SourceLine>
   <SourceLine>hit.CurrentLocalTransform = Me.CurrentLocalTransform.Copy</SourceLine>
   <SourceLine>hit.DragStartPointLocal = localP</SourceLine>
   <SourceLine>hit.ItemStartPositionLocal.Set(Me.Position)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return hit</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>screenP as TRVector2D, worldP as TRVector2D, currentWorldTransform as TRAffineTransform</ItemParams>
  <ItemResult>TRAnimationHitSprite</ItemResult>
 </Method>
 <Method>
  <ItemName>UpdateCenter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>75841535</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub UpdateCenter()</SourceLine>
   <SourceLine>// Abstract</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>WorldBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1690603519</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function WorldBounds(ignoreItems as Set = nil) As TRAnimationBounds</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Hidden Or Me.IgnoreBoundsTest Or (ignoreItems &lt;&gt; Nil And ignoreItems.HasMember(Me)) Then</SourceLine>
   <SourceLine>Return Nil</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim myBounds, childBounds, worldBounds(-1) As TRAnimationBounds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>myBounds = Me.LocalBoundsOverride</SourceLine>
   <SourceLine>If myBounds &lt;&gt; Nil Then </SourceLine>
   <SourceLine>myBounds.Transform(Me.CurrentWorldTransform)</SourceLine>
   <SourceLine>worldBounds.add(myBounds)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each child As TRAnimationSprite In Me.Children</SourceLine>
   <SourceLine>childBounds = child.WorldBounds(ignoreItems)</SourceLine>
   <SourceLine>If childBounds &lt;&gt; Nil Then</SourceLine>
   <SourceLine>worldBounds.Add(childBounds)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If worldBounds.Count = 0 Then</SourceLine>
   <SourceLine>Return Nil</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return New TRAnimationBounds(worldBounds)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>ignoreItems as Set = nil</ItemParams>
  <ItemResult>TRAnimationBounds</ItemResult>
 </Method>
 <Method>
  <ItemName>Flatten</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1411454975</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Flatten(results() As TRAnimationSprite)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>'If Me.Hidden Then</SourceLine>
   <SourceLine>'Return</SourceLine>
   <SourceLine>'End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>results.Add(Me)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each child As TRAnimationSprite In Me.Children</SourceLine>
   <SourceLine>child.Flatten(results)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>results() As TRAnimationSprite</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>CollisionBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>416092159</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CollisionBounds() As TRAnimationBounds()</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim results(-1) As TRAnimationBounds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.CollisionBounds(results)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return results</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>TRAnimationBounds()</ItemResult>
 </Method>
 <Method>
  <ItemName>CollisionBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1573523455</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CollisionBounds(results() as TRAnimationBounds)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>RaiseEvent CollisionBounds(results)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each child As TRAnimationSprite In Me.Children</SourceLine>
   <SourceLine>child.CollisionBounds(results)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>results() as TRAnimationBounds</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>WorldCollisionBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1778946047</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function WorldCollisionBounds() As TRAnimationBounds()</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim results(-1) As TRAnimationBounds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.CollisionBounds(results)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>TRAnimationBounds.Transform(results, Me.CurrentWorldTransform)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return results</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>TRAnimationBounds()</ItemResult>
 </Method>
 <Method>
  <ItemName>UpdateTransforms</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>197122047</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub UpdateTransforms(parent as TRAnimationSprite = nil)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If parent &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Me.mParent = New WeakRef(parent)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If Me.mParent &lt;&gt; Nil And Me.mParent.Value &lt;&gt; Nil Then</SourceLine>
   <SourceLine>parent = TRAnimationSprite(Me.mParent.Value)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Hidden Then</SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.CurrentLocalTransform.Reset</SourceLine>
   <SourceLine>Me.CurrentLocalTransform.Translate(Me.Position.X, Me.Position.Y)</SourceLine>
   <SourceLine>Me.CurrentLocalTransform.Rotate(Me.RotationAsDegrees * kRadian)</SourceLine>
   <SourceLine>Me.CurrentLocalTransform.Scale(Me.Scale.X, Me.Scale.Y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If parent &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Me.CurrentWorldTransform = parent.CurrentWorldTransform.Copy // Why copy? Maybe it's better to subtract old CurrentLocalTransform and apply new CurrentLocalTransform</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Me.CurrentWorldTransform = New TRAffineTransform</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.CurrentWorldTransform = TRAffineTransform.Concat(Me.CurrentLocalTransform, Me.CurrentWorldTransform)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each child As TRAnimationSprite In Me.Children</SourceLine>
   <SourceLine>child.UpdateTransforms(Me)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>parent as TRAnimationSprite = nil</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>NextFrameOverride</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>607109119</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub NextFrameOverride(g as Graphics, core as TRAnimationCanvasCore, worldTransform as TRAffineTransform, elapsedTime as Double)</SourceLine>
   <SourceLine>// Abstract</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>g as Graphics, core as TRAnimationCanvasCore, worldTransform as TRAffineTransform, elapsedTime as Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LocalBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1512851455</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LocalBounds() As TRAnimationBounds</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.LocalBoundsOverride</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>TRAnimationBounds</ItemResult>
 </Method>
 <Method>
  <ItemName>LocalBoundsOverride</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1502812159</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function LocalBoundsOverride() As TRAnimationBounds</SourceLine>
   <SourceLine>// Abstract</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>TRAnimationBounds</ItemResult>
 </Method>
 <Method>
  <ItemName>Reset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2057486335</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Reset()</SourceLine>
   <SourceLine>// Abstract</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>FirstIndexOf</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>901046271</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function FirstIndexOf(sprite as TRAnimationSprite) As Integer</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For i As Integer = 0 To Me.Children.LastIndex</SourceLine>
   <SourceLine>If Me.Children(i) = sprite Then Return i</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>sprite as TRAnimationSprite</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>DebugDrawBounds</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>184256511</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DebugDrawBounds(g as Graphics)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// DEBUG below</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.DrawingColor = Color.Green</SourceLine>
   <SourceLine>g.FillOval(-3, -3, 5, 5)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim v As TRVector2D = Me.CurrentWorldTransform.VectorX</SourceLine>
   <SourceLine>g.DrawLine(0,0,v.x * 100, v.y * 100)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.CurrentWorldTransform.IsAxisAligned Then</SourceLine>
   <SourceLine>'System.DebugLog("is AA")</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>'System.DebugLog("is NOT AA")</SourceLine>
   <SourceLine>'Me.CurrentWorldTransform.VectorX.DebugLog("AxisX")</SourceLine>
   <SourceLine>'Me.CurrentWorldTransform.VectorY.DebugLog("AxisY")</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.DebugLastHitPoint &lt;&gt; Nil Then</SourceLine>
   <SourceLine>g.DrawingColor = Color.Red</SourceLine>
   <SourceLine>g.FillOval(-3 + Me.DebugLastHitPoint.X, -3 + Me.DebugLastHitPoint.Y, 5, 5)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.DebugLastDragPoint &lt;&gt; Nil Then</SourceLine>
   <SourceLine>g.DrawLine(Me.DebugLastHitPoint.X, Me.DebugLastHitPoint.Y, Me.DebugLastDragPoint.X, Me.DebugLastDragPoint.Y)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>g as Graphics</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HitTestOverride</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1201483775</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HitTestOverride(screenP as TRVector2D, worldP as TRVector2D, localP as TRVector2D) As Boolean</SourceLine>
   <SourceLine>// Abstract</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>screenP as TRVector2D, worldP as TRVector2D, localP as TRVector2D</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>TRAnimationBehaviorDelegate_BehaviorNextFrame</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>927477759</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub TRAnimationBehaviorDelegate_BehaviorNextFrame(behavior as TRAnimationBehavior, tween as TRTween)</SourceLine>
   <SourceLine>// Part of the TRAnimationBehaviorDelegate interface.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Abstract</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>behavior as TRAnimationBehavior, tween as TRTween</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>IsAnimating</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1705052159</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function IsAnimating() As Boolean</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Hidden Then</SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.IsAnimatingOverride Then</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Behaviors.Values.Count &gt; 0 Or Me.TargetBehaviorQueue.Count &gt; 0 Then</SourceLine>
   <SourceLine>If Me.Behaviors.Values.Count = 1 And Me.TargetBehaviorQueue.Count = 0 Then</SourceLine>
   <SourceLine>// Extra check for the current (and only) behavior — it could be complete but not yet removed from the behavior list!</SourceLine>
   <SourceLine>Dim v() As Variant = Me.Behaviors.Values</SourceLine>
   <SourceLine>Dim b As TRAnimationBehavior = TRAnimationBehavior(v(0))</SourceLine>
   <SourceLine>If Not b.isComplete Then</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each s As TRAnimationSprite In Me.Children</SourceLine>
   <SourceLine>If s.IsAnimating Then</SourceLine>
   <SourceLine>Return True</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>TransformRelativeTo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1745496063</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function TransformRelativeTo(s as TRAnimationSprite) As TRAffineTransform</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim rt, st As TRAffineTransform</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>rt = Me.CurrentWorldTransform</SourceLine>
   <SourceLine>st = s.CurrentWorldTransform.Inverse</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return TRAffineTransform.Concat(st, rt)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>s as TRAnimationSprite</ItemParams>
  <ItemResult>TRAffineTransform</ItemResult>
 </Method>
 <Method>
  <ItemName>AddBehavior</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1003415551</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddBehavior(behavior as TRAnimationBehavior, key as String = "")</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If key = "" Then</SourceLine>
   <SourceLine>key = behavior.Name</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Behaviors.Value(key) = behavior</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>behavior as TRAnimationBehavior, key as String = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveChild</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>51462143</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RemoveChild(sprite as TRAnimationSprite)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer = Me.FirstIndexOf(sprite)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If i &gt; -1 Then</SourceLine>
   <SourceLine>Me.DeleteQueue.Add(Me.Children(i))</SourceLine>
   <SourceLine>Me.Children.RemoveAt(i)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>sprite as TRAnimationSprite</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveChildrenNamed</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>297709567</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RemoveChildrenNamed(name as String)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i, u As Integer</SourceLine>
   <SourceLine>u = Me.Children.LastIndex</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For i = u DownTo 0</SourceLine>
   <SourceLine>If Me.Children(i).Name = name Then</SourceLine>
   <SourceLine>Me.DeleteQueue.Add(Me.Children(i))</SourceLine>
   <SourceLine>Me.Children.RemoveAt(i)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name as String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveFromParent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>54534143</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RemoveFromParent(removeImmediately as Boolean = True)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.mParent &lt;&gt; Nil Then</SourceLine>
   <SourceLine>If removeImmediately Then</SourceLine>
   <SourceLine>TRAnimationSprite(Me.mParent.Value).RemoveChild(Me)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>TRAnimationSprite(Me.mParent.Value).DeleteQueue.Add(Me)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>removeImmediately as Boolean = True</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>AddChild</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1739028479</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub AddChild(child as TRAnimationSprite, index as Integer = -1)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If child = Nil Then Return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim i As Integer = Me.FirstIndexOf(child)</SourceLine>
   <SourceLine>If i &gt; -1 Then</SourceLine>
   <SourceLine>Me.Children.RemoveAt(i) // Remove first</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If index &lt; 0 Then</SourceLine>
   <SourceLine>// Add at end</SourceLine>
   <SourceLine>Me.Children.Add(child)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>// Add at index</SourceLine>
   <SourceLine>Me.Children.AddAt(0, child)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>child.UpdateTransforms(Me)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>child as TRAnimationSprite, index as Integer = -1</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>TransformAroundWorldPoint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>312045567</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub TransformAroundWorldPoint(translation as TRVector2D, rotationWorldPosition as TRVector2D, rotationAsDegrees as Double, scale as TRVector2D)</SourceLine>
   <SourceLine>'Dim myWorldPosition As TRVector2D = Me.Parent.CurrentWorldTransform.ApplyAffineTransform(Me.Position)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'// Compute world space vector from drag sprite to drag sprite bounds</SourceLine>
   <SourceLine>'Dim dragSpriteWorldPosition As TRVector2D = Me.DragSprite.Parent.CurrentWorldTransform.ApplyAffineTransform(Me.DragSprite.Position)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'Dim vectorToBounds As New TRVector2D(rotationWorldPosition)</SourceLine>
   <SourceLine>'vectorToBounds.Subtract(myWorldPosition)</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine>'vectorToBounds.RotateByDegrees(rotationAsDegrees)</SourceLine>
   <SourceLine>'vectorToBounds.Add(myWorldPosition) // Now rotated bounds position</SourceLine>
   <SourceLine>'</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>translation as TRVector2D, rotationWorldPosition as TRVector2D, rotationAsDegrees as Double, scale as TRVector2D</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Copy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1281464319</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Copy(c As TRAnimationSprite = nil) As TRAnimationSprite</SourceLine>
   <SourceLine>// Note: May not be complete for all subclasses that ship with TRAnimation</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If c = Nil Then</SourceLine>
   <SourceLine>c = New TRAnimationSprite</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// NOTE: Keep copy code in alphabetical order</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>c.Alpha = Me.Alpha</SourceLine>
   <SourceLine>c.AntiAlias = Me.AntiAlias</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Don't copy </SourceLine>
   <SourceLine>'c.Behaviors</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>c.CanDrag = Me.CanDrag</SourceLine>
   <SourceLine>c.Center = Me.Center.Copy</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Deep copy of children</SourceLine>
   <SourceLine>For Each child As TRAnimationSprite In Me.Children</SourceLine>
   <SourceLine>c.AddChild(child.Copy)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Don't copy </SourceLine>
   <SourceLine>'c.DebugLastDragPoint</SourceLine>
   <SourceLine>'c.DebugLastHitPoint</SourceLine>
   <SourceLine>'c.DeleteQueue</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>c.DrawChildrenFirst = Me.DrawChildrenFirst</SourceLine>
   <SourceLine>c.Hidden = Me.Hidden</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Don't copy </SourceLine>
   <SourceLine>'c.HitTestUserData</SourceLine>
   <SourceLine>'c.ID</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>c.IgnoreHitTests = Me.IgnoreHitTests</SourceLine>
   <SourceLine>c.IsAnimatingOverride = Me.IsAnimatingOverride</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Don't copy</SourceLine>
   <SourceLine>'c.mParent</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>c.Name = Me.Name</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Don't copy</SourceLine>
   <SourceLine>'c.TargetBehaviorQueue</SourceLine>
   <SourceLine>'c.Parent</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>c.Position = Me.Position.Copy</SourceLine>
   <SourceLine>c.RotationAsDegrees = Me.RotationAsDegrees</SourceLine>
   <SourceLine>c.Scale = Me.Scale.Copy</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Don't copy</SourceLine>
   <SourceLine>'c.TargetBehavior</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return c</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>c As TRAnimationSprite = nil</ItemParams>
  <ItemResult>TRAnimationSprite</ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveTargetBehaviors</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>109625343</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RemoveTargetBehaviors(name as String = "")</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If name = "" Then</SourceLine>
   <SourceLine>// Remove all</SourceLine>
   <SourceLine>Me.TargetBehavior = Nil</SourceLine>
   <SourceLine>Me.TargetBehaviorQueue.RemoveAll</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>If Me.TargetBehavior &lt;&gt; Nil And Me.TargetBehavior.Name = name Then</SourceLine>
   <SourceLine>Me.TargetBehavior = Nil</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim u As Integer = Me.TargetBehaviorQueue.LastIndex</SourceLine>
   <SourceLine>For i As Integer = u DownTo 0</SourceLine>
   <SourceLine>If Me.TargetBehaviorQueue(i).Name = name Then</SourceLine>
   <SourceLine>Me.TargetBehaviorQueue.RemoveAt(i)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>name as String = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>HasBehaviors</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>673558527</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function HasBehaviors() As Boolean</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.TargetBehaviorQueue.Count &gt; 0 And Me.Behaviors.Values.Count &gt; 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>TRAnimationBehaviorDelegate_BehaviorComplete</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>273473535</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub TRAnimationBehaviorDelegate_BehaviorComplete(behavior as TRAnimationBehavior)</SourceLine>
   <SourceLine>// Part of the TRAnimationBehaviorDelegate interface.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Abstract</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>behavior as TRAnimationBehavior</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ToPicture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1456875519</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ToPicture(toPicture as Picture = nil, screenScale as Double, core as TRAnimationCanvasCore) As Picture</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim r As TRAnimationBounds = Me.LocalBoundsOverride</SourceLine>
   <SourceLine>Dim w As Integer = Max(1, Round(r.AABB.Width * screenScale))</SourceLine>
   <SourceLine>Dim h As Integer = Max(1, Round(r.AABB.Height * screenScale))</SourceLine>
   <SourceLine>Dim g As Graphics</SourceLine>
   <SourceLine>Dim debugColor As Color = Color.Clear</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Make a new buffer if our buffer isn't big enough</SourceLine>
   <SourceLine>If toPicture = Nil Or toPicture.Width &lt; w Or toPicture.Height &lt; h Then</SourceLine>
   <SourceLine>toPicture = New Picture(w, h)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g = toPicture.Graphics</SourceLine>
   <SourceLine>debugColor = Color.RGB(Rnd * 256, Rnd * 256, Rnd * 256)</SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>g = toPicture.Graphics</SourceLine>
   <SourceLine>g.ClearRectangle(0, 0, toPicture.Width, toPicture.Height)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Debugging</SourceLine>
   <SourceLine>'g.DrawingColor = debugColor</SourceLine>
   <SourceLine>'g.FillRectangle(0, 0, g.Width, g.Height)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>g.SaveState</SourceLine>
   <SourceLine>g.Scale(screenScale, screenScale)</SourceLine>
   <SourceLine>g.Translate(-r.AABB.Left, -r.AABB.Top)</SourceLine>
   <SourceLine>Me.NextFrameOverride(g, core, New TRAffineTransform, 0.0)</SourceLine>
   <SourceLine>g.RestoreState</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return toPicture</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>toPicture as Picture = nil, screenScale as Double, core as TRAnimationCanvasCore</ItemParams>
  <ItemResult>Picture</ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveChild</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1578493951</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RemoveChild(index as Integer)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.DeleteQueue.Add(Me.Children(index))</SourceLine>
   <SourceLine>Me.Children.RemoveAt(index)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>index as Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>RemoveAllChildren</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>276779007</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub RemoveAllChildren()</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each child As TRAnimationSprite In Me.Children</SourceLine>
   <SourceLine>Me.DeleteQueue.Add(child)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Children.ResizeTo(-1)</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>NextFrameOverrideBackground</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2052401151</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub NextFrameOverrideBackground(g as Graphics, core as TRAnimationCanvasCore, worldTransform as TRAffineTransform, elapsedTime as Double)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Abstract</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>g as Graphics, core as TRAnimationCanvasCore, worldTransform as TRAffineTransform, elapsedTime as Double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ChildrenArrayCopy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1563242495</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function ChildrenArrayCopy() As TRAnimationSprite()</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim child, c() As TRAnimationSprite</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each child In Me.Children</SourceLine>
   <SourceLine>c.Add(child)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return c</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>TRAnimationSprite()</ItemResult>
 </Method>
 <Hook>
  <ItemName>CollisionBounds</ItemName>
  <TextEncoding>134217984</TextEncoding>
  <ItemFlags>33</ItemFlags>
  <SystemFlags>0</SystemFlags>
  <ItemParams>results() as TRAnimationBounds</ItemParams>
  <ItemResult></ItemResult>
 </Hook>
 <Property>
  <ItemName>Children(-1)</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>668518399</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Children(-1) As TRAnimationSprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Children(-1) As TRAnimationSprite</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Position</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>608370687</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Position As TRVector2D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Position As TRVector2D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>RotationAsDegrees</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>826879999</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RotationAsDegrees As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RotationAsDegrees As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Scale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>987035647</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Scale As TRVector2D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Scale As TRVector2D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>AntiAlias</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1341829119</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AntiAlias As Boolean = True</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AntiAlias As Boolean = True</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Center</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1296226303</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Center As TRVector2D</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Center As TRVector2D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>CurrentLocalTransform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>662454271</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CurrentLocalTransform As TRAffineTransform</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CurrentLocalTransform As TRAffineTransform</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>CurrentWorldTransform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>814950399</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CurrentWorldTransform As TRAffineTransform</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CurrentWorldTransform As TRAffineTransform</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DebugLastHitPoint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1247053823</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DebugLastHitPoint As TRVector2D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DebugLastHitPoint As TRVector2D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DebugLastDragPoint</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>527783935</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DebugLastDragPoint As TRVector2D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DebugLastDragPoint As TRVector2D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Behaviors</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>385908735</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Behaviors As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Behaviors As Dictionary</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IgnoreHitTests</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>566616063</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IgnoreHitTests As Boolean = False</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IgnoreHitTests As Boolean = False</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>TargetScale</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2023477247</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TargetScale As TRVector2D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TargetScale As TRVector2D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>// Grab the target scale OR current scale</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// TODO: Might also check if behavior is currently enable/running</SourceLine>
   <SourceLine>If Me.TargetBehavior &lt;&gt; Nil And Me.TargetBehavior.TargetScale &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Return Me.TargetBehavior.TargetScale</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Me.Scale // OK to return reference</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>mParent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>566249471</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mParent As WeakRef</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mParent As WeakRef</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Parent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1941082111</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Parent As TRAnimationSprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Parent As TRAnimationSprite</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.mParent = New WeakRef(value)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.mParent &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Return TRAnimationSprite(Me.mParent.Value)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>DrawChildrenFirst</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>166293503</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DrawChildrenFirst As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DrawChildrenFirst As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Hidden</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1723381759</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Hidden As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Hidden As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>ID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1382604799</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ID As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ID As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Name</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1235171327</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Name As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Name As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Alpha</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>737011711</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Alpha As Double = 1.0</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Alpha As Double = 1.0</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>CanDrag</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1759545343</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>CanDrag As Boolean = False</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>CanDrag As Boolean = False</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IsAnimatingOverride</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1196531711</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IsAnimatingOverride As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IsAnimatingOverride As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>HitTestUserData</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>273135615</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>HitTestUserData As Variant</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>HitTestUserData As Variant</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>TargetBehavior</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>29661183</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TargetBehavior As TRAnimationBehaviorTarget</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TargetBehavior As TRAnimationBehaviorTarget</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If value = Nil Then</SourceLine>
   <SourceLine>If Me.Behaviors.HasKey(Me.kTargetBehaviorKey) Then</SourceLine>
   <SourceLine>Me.Behaviors.Remove(Me.kTargetBehaviorKey)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Behaviors.Value(Me.kTargetBehaviorKey) = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Behaviors.HasKey(Me.kTargetBehaviorKey) Then</SourceLine>
   <SourceLine>Return Me.Behaviors.Value(Me.kTargetBehaviorKey)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return Nil</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TargetBehaviorQueue(-1)</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1843388415</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TargetBehaviorQueue(-1) As TRAnimationBehaviorTarget</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TargetBehaviorQueue(-1) As TRAnimationBehaviorTarget</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>DeleteQueue(-1)</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1586870271</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>DeleteQueue(-1) As TRAnimationSprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>DeleteQueue(-1) As TRAnimationSprite</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>RenderBuffer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1569060863</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RenderBuffer As Picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RenderBuffer As Picture</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>RenderBufferOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1058920447</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>RenderBufferOffset As TRVector2D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>RenderBufferOffset As TRVector2D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>IgnoreBoundsTest</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1836941311</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>IgnoreBoundsTest As Boolean = False</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>IgnoreBoundsTest As Boolean = False</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>PointerEventDelegate</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1395617791</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>PointerEventDelegate As TRAnimationGroupSprite</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>PointerEventDelegate As TRAnimationGroupSprite</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RotationAsDegrees</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>AntiAlias</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>True</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IgnoreHitTests</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DrawChildrenFirst</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Hidden</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ID</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Alpha</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>1</PropertyValue>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>CanDrag</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IsAnimatingOverride</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>RenderBuffer</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Picture</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>IgnoreBoundsTest</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>kTargetBehaviorKey</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1036871679</PartID>
  <TextEncoding>134217984</TextEncoding>
  <ItemType>0</ItemType>
  <ItemDef>TRAnimationBehavior</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
</block>
</RBProject>
