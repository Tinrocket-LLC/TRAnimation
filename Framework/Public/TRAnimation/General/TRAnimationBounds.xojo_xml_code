<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2023r1.1" FormatVersion="2" MinIDEVersion="20140300">
<block type="Module" ID="642668543">
 <ObjName>TRAnimationBounds</ObjName>
 <ObjContainerID>0</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1769273343</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(n as String)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Constructor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Name = n</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>n as String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DebugLog</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>333596671</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DebugLog(desc as String = "")</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim s As String = EndOfLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If desc &lt;&gt; "" Then</SourceLine>
   <SourceLine>s = s + "TRAnimationBounds: " + desc + EndOfLine</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>s = s + "Position: " + Me.Position.X.ToString("0.0") + ", " + Me.Position.Y.ToString("0.0") + EndOfLine</SourceLine>
   <SourceLine>s = s + "Radius: " + Me.Radius.ToString("0.0") + EndOfLine</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.AABB &lt;&gt; Nil Then</SourceLine>
   <SourceLine>s = s + "AABB: (" + Me.AABB.Left.ToString("0.0") + ", " + Me.AABB.Top.ToString("0.0") + "), (" + Me.AABB.Width.ToString("0.0") + ", " + Me.AABB.Height.ToString("0.0") + ")" + EndOfLine</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>System.DebugLog(s)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>desc as String = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Transform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>410623999</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Transform(transform as TRAffineTransform)</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Position.Set(transform.ApplyAffineTransform(Me.Position))</SourceLine>
   <SourceLine>Me.Radius = transform.ApplyAffineTransform(Me.Radius)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// TODO: If the transform has a rotation, then remove the AABB</SourceLine>
   <SourceLine>// If there's no rotation, then you can use AABB to compute a tighter parent bounds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.AABB &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Me.AABB = transform.ApplyAffineTransform(Me.AABB)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Direction &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Me.Direction = transform.ApplyAffineTransformAsVector(Me.Direction)</SourceLine>
   <SourceLine>Me.Direction.Normalize</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>transform as TRAffineTransform</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1347100671</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(rect as Rect, n as String = "")</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Constructor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.AABB = rect</SourceLine>
   <SourceLine>Me.Name = n</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Position.Set(rect.Center.X, rect.Center.Y)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim v As TRVector2D = New TRVector2D(rect.Width, rect.Height)</SourceLine>
   <SourceLine>Me.Radius = v.Length / 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Valid = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>rect as Rect, n as String = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>9605119</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(bounds() as TRAnimationBounds, n as String = "")</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim w, h As Double</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Name = n</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Select Case bounds.Count</SourceLine>
   <SourceLine>Case 0</SourceLine>
   <SourceLine>// Not valid</SourceLine>
   <SourceLine>Me.Constructor</SourceLine>
   <SourceLine>Me.Valid = False</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case 1</SourceLine>
   <SourceLine>// Just copy the bounds</SourceLine>
   <SourceLine>Me.Constructor</SourceLine>
   <SourceLine>Me.Position.Set(bounds(0).Position)</SourceLine>
   <SourceLine>Me.Radius = bounds(0).Radius</SourceLine>
   <SourceLine>Me.AABB = bounds(0).AABB</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine>// Find AABB of bounds and compute new enclosing circle</SourceLine>
   <SourceLine>Dim minX, maxX, minY, maxY As Double</SourceLine>
   <SourceLine>Dim b As TRAnimationBounds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>b = bounds(0)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>minX = b.Position.X</SourceLine>
   <SourceLine>minY = b.Position.Y</SourceLine>
   <SourceLine>maxX = minX</SourceLine>
   <SourceLine>maxY = minY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For Each b In bounds</SourceLine>
   <SourceLine>w = b.BestSize.Width / 2</SourceLine>
   <SourceLine>h = b.BestSize.Height / 2</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>minX = Min(minX, b.Position.X - w)</SourceLine>
   <SourceLine>minY = Min(minY, b.Position.Y - h)</SourceLine>
   <SourceLine>maxX = Max(maxX, b.Position.X + w)</SourceLine>
   <SourceLine>maxY = Max(maxY, b.Position.Y + h)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim r As Rect = New Rect(minX, minY, maxX - minX, maxY - minY)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Constructor(r)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>bounds() as TRAnimationBounds, n as String = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>754307071</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(p as TRVector2D, radius as Double, n as String = "")</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Constructor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Position.Set(p)</SourceLine>
   <SourceLine>Me.Name = n</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Radius = radius</SourceLine>
   <SourceLine>Me.Valid = True</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>p as TRVector2D, radius as Double, n as String = ""</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Copy</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1112088575</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Copy() As TRAnimationBounds</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim copy As TRAnimationBounds = Me.Factory</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.AABB &lt;&gt; Nil Then</SourceLine>
   <SourceLine>copy.AABB = New Rect(Me.AABB.Left, Me.AABB.Top, Me.AABB.Width, Me.AABB.Height)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>copy.Name = Me.Name</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Direction &lt;&gt; Nil Then</SourceLine>
   <SourceLine>copy.Direction = Me.Direction.Copy</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>copy.ID = Me.ID</SourceLine>
   <SourceLine>copy.Owner = Me.Owner</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.Position &lt;&gt; Nil Then</SourceLine>
   <SourceLine>copy.Position = Me.Position.Copy</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>copy.Radius = Me.Radius</SourceLine>
   <SourceLine>copy.Valid = Me.Valid</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return copy</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>TRAnimationBounds</ItemResult>
 </Method>
 <Method>
  <ItemName>Contains</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>553246719</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Contains(p as TRVector2D) As Boolean</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.AABB &lt;&gt; nil Then</SourceLine>
   <SourceLine>Return Me.AABB.Contains(p.X, p.Y)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim v As TRVector2D = New TRVector2D(Me.Position)</SourceLine>
   <SourceLine>v.Subtract(p)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return v.LengthSquared &lt;= (Me.Radius * Me.Radius)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>p as TRVector2D</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>Factory</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1730813951</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Factory() As TRAnimationBounds</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return New TRAnimationBounds</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult>TRAnimationBounds</ItemResult>
 </Method>
 <Method>
  <ItemName>Transform</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>2115469311</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Shared Sub Transform(bounds() as TRAnimationBounds, transform as TRAffineTransform)</SourceLine>
   <SourceLine>// Makes a copy of each bounds</SourceLine>
   <SourceLine>// Modifies the incoming array rather than returning an array because subclasses of TRAnimationBounds can be passed in</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>For i As Integer = 0 To bounds.LastIndex</SourceLine>
   <SourceLine>bounds(i) = bounds(i).Copy</SourceLine>
   <SourceLine>bounds(i).Transform(transform)</SourceLine>
   <SourceLine>Next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>1</IsShared>
  <ItemParams>bounds() as TRAnimationBounds, transform as TRAffineTransform</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>542894079</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor()</SourceLine>
   <SourceLine>#Pragma BackgroundTasks True</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Default constructor</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Me.Position = New TRVector2D</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>Notes</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1001117695</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>Notes</NoteLine>
   <NoteLine>Just a simple enclosing circle for now</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>Position</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1776103423</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Position As TRVector2D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Position As TRVector2D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Radius</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>856795135</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Radius As Double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Radius As Double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Valid</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>12345343</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Valid As Boolean = False</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Valid As Boolean = False</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>AABB</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1755451391</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>AABB As Rect</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>AABB As Rect</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>BestSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>456329215</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>BestSize As Size</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>BestSize As Size</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>#Pragma BackgroundTasks False</SourceLine>
   <SourceLine>#Pragma StackOverflowChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma NilObjectChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine>#Pragma BoundsChecking TRAnimation.kSafeMode</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Me.AABB &lt;&gt; Nil Then</SourceLine>
   <SourceLine>Return New Size(Me.AABB.Width, Me.AABB.Height)</SourceLine>
   <SourceLine>End</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return New Size(Me.Radius * 2, Me.Radius * 2)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Owner</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1493792767</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Owner As Object</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Owner As Object</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Name</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1304684543</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Name As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Name As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>Direction</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1445769215</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Direction As TRVector2D</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Direction As TRVector2D</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>ID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>272273407</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ID As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ID As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Radius</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Valid</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>False</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ID</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
